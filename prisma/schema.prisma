generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  emotionLogs   EmotionLog[]
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String?
  messages  String
  emotion   String?
  category  String?
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmotionLog {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime @default(now())
  emotions String
  score    Int
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String?  @unique
  status           String   @default("free")
  plan             String   @default("free")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
